"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = selectAdhocProvisioningProfile;

function _ora() {
  const data = _interopRequireDefault(require("ora"));

  _ora = function () {
    return data;
  };

  return data;
}

function _fastlane() {
  const data = require("../../appleApi/fastlane");

  _fastlane = function () {
    return data;
  };

  return data;
}

function _tagger() {
  const data = require("./tagger");

  _tagger = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function selectAdhocProvisioningProfile(context, udids, bundleIdentifier, distCertSerialNumber, options = {}) {
  const spinner = (0, _ora().default)(`Handling Adhoc provisioning profiles on Apple Developer Portal...`).start();
  const args = ['--apple-id', context.appleId, '--apple-password', context.appleIdPassword, context.team.id, udids, bundleIdentifier, distCertSerialNumber];
  const adhocProvisioningProfile = await (0, _fastlane().runAction)(_fastlane().travelingFastlane.manageAdHocProvisioningProfile, args);
  const {
    provisioningProfileUpdateTimestamp,
    provisioningProfileCreateTimestamp,
    provisioningProfileName
  } = adhocProvisioningProfile;

  if (provisioningProfileCreateTimestamp) {
    spinner.succeed(`Created new profile: ${provisioningProfileName}`);
  } else if (provisioningProfileUpdateTimestamp) {
    spinner.succeed(`Updated existing profile: ${provisioningProfileName}`);
  } else {
    spinner.succeed(`Used existing profile: ${provisioningProfileName}`);
  } // tag for updating to Expo servers


  (0, _tagger().tagForUpdate)(adhocProvisioningProfile);
  return adhocProvisioningProfile;
}
//# sourceMappingURL=../../__sourcemaps__/commands/client/selectAdhocProvisioningProfile.js.map
