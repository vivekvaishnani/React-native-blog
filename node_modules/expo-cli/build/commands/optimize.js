"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.action = action;
exports.default = _default;

function _spawnAsync() {
  const data = _interopRequireDefault(require("@expo/spawn-async"));

  _spawnAsync = function () {
    return data;
  };

  return data;
}

function _config() {
  const data = require("@expo/config");

  _config = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function action(projectDir = './', options = {}) {
  const {
    exp
  } = await (0, _config().readConfigJsonAsync)(projectDir);

  if (exp === null) {
    _log().default.warn('No Expo configuration found. Are you sure this is a project directory?');

    process.exit(1);
  } // Everything after this is a redirect for the deprecated optimize command


  _log().default.warn('\u203A `expo optimize` is deprecated please use `npx expo-optimize` as a drop-in replacement for `expo optimize`.');

  const args = [projectDir];
  if (options.save) args.push('--save');
  if (options.quality) args.push('--quality', options.quality);
  if (options.include) args.push('--include', options.include);
  if (options.exclude) args.push('--exclude', options.exclude);
  await (0, _spawnAsync().default)(require.resolve('expo-optimize'), args, {
    stdio: 'inherit'
  });
}

function _default(program) {
  program.command('optimize [project-dir]').alias('o').description('Compress the assets in your Expo project').option('-s, --save', 'Save the original assets with a .orig extension').option('--quality [number]', 'Specify the quality the compressed image is reduced to. Default is 80').option('--include [pattern]', 'Include only assets that match this glob pattern relative to the project root').option('--exclude [pattern]', 'Exclude all assets that match this glob pattern relative to the project root').allowOffline().asyncAction(action);
}
//# sourceMappingURL=../__sourcemaps__/commands/optimize.js.map
