"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _mapValues() {
  const data = _interopRequireDefault(require("lodash/mapValues"));

  _mapValues = function () {
    return data;
  };

  return data;
}

function _isObject() {
  const data = _interopRequireDefault(require("lodash/isObject"));

  _isObject = function () {
    return data;
  };

  return data;
}

function _isEmpty() {
  const data = _interopRequireDefault(require("lodash/isEmpty"));

  _isEmpty = function () {
    return data;
  };

  return data;
}

function _pickBy() {
  const data = _interopRequireDefault(require("lodash/pickBy"));

  _pickBy = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function getFromParams(options) {
  const distPassword = process.env.EXPO_IOS_DIST_P12_PASSWORD;
  const {
    distP12Path,
    pushP8Path,
    pushId,
    provisioningProfilePath
  } = options;

  if (_isOnlyOneSet(distP12Path, distPassword)) {
    throw new Error('You have to both pass --dist-p12-path parameter and set EXPO_IOS_DIST_P12_PASSWORD environment variable.');
  }

  if (_isOnlyOneSet(pushP8Path, pushId)) {
    throw new Error('You have to pass both --push-p8-path and --push-id parameters.');
  }

  const all = {
    distributionCert: {
      certP12: distP12Path && (await _fsExtra().default.readFile(distP12Path, 'base64')),
      certPassword: distPassword
    },
    pushKey: {
      apnsKeyP8: pushP8Path && (await _fsExtra().default.readFile(pushP8Path, 'utf8')),
      apnsKeyId: pushId
    },
    provisioningProfile: provisioningProfilePath && (await _fsExtra().default.readFile(provisioningProfilePath, 'base64'))
  };
  const withoutEmptyObjects = (0, _mapValues().default)(all, value => {
    if ((0, _isObject().default)(value)) {
      const cleanedValue = (0, _pickBy().default)(value);
      return (0, _isEmpty().default)(cleanedValue) ? null : cleanedValue;
    } else {
      return value;
    }
  });
  return (0, _pickBy().default)(withoutEmptyObjects);
}

const _isOnlyOneSet = (a, b) => a && !b || b && !a;

var _default = getFromParams;
exports.default = _default;
//# sourceMappingURL=../../../../../__sourcemaps__/commands/build/ios/credentials/prompt/getFromParams.js.map
