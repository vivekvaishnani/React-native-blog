"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _os() {
  const data = _interopRequireDefault(require("os"));

  _os = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _xdl() {
  const data = require("@expo/xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

function _ora() {
  const data = _interopRequireDefault(require("ora"));

  _ora = function () {
    return data;
  };

  return data;
}

function _v() {
  const data = _interopRequireDefault(require("uuid/v4"));

  _v = function () {
    return data;
  };

  return data;
}

function _prepare() {
  const data = require("./prepare");

  _prepare = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("./utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Builder {
  constructor(user) {
    this.client = _xdl().TurtleApi.clientForUser(user.sessionSecret);
  }

  async buildProject(projectDir, options) {
    const tarPath = _path().default.join(_os().default.tmpdir(), `${(0, _v().default)()}.tar.gz`);

    try {
      await (0, _utils().makeProjectTarball)(tarPath);
      const spinner = (0, _ora().default)('Uploading project to server.').start();
      const {
        s3Url
      } = await this.client.uploadFile(tarPath);
      spinner.succeed('Project uploaded.');
      const job = await (0, _prepare().prepareJob)(options, s3Url, projectDir);
      const response = await this.client.postAsync('build/start', job);
      return await (0, _utils().waitForBuildEnd)(this.client, response.buildId);
    } finally {
      await _fsExtra().default.remove(tarPath);
    }
  }

  async getLatestBuilds() {
    return await this.client.getAsync('build/status');
  }

}

exports.default = Builder;
//# sourceMappingURL=../../__sourcemaps__/commands/build-native/Builder.js.map
