"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function Eject() {
  const data = _interopRequireWildcard(require("./eject/Eject"));

  Eject = function () {
    return data;
  };

  return data;
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

// Set EXPO_VIEW_DIR to universe/exponent to pull expo view code locally instead of from S3
async function action(projectDir, options) {
  await Eject().ejectAsync(projectDir, options);
}

var _default = program => {
  program.command('eject [project-dir]').description('Creates Xcode and Android Studio projects for your app. Use this if you need to add custom native functionality.').option('--eject-method [type]', 'Eject method to use. If not specified, the command will ask which one to use. Required when using the --non-interactive option. expokit, plain', value => value.toLowerCase()).option('-f --force', 'Will attempt to generate an iOS project even when the system is not running macOS. Unsafe and may fail.').asyncActionProjectDir(action,
  /* skipProjectValidation: */
  false,
  /* skipAuthCheck: */
  true);
};

exports.default = _default;
//# sourceMappingURL=../__sourcemaps__/commands/eject.js.map
