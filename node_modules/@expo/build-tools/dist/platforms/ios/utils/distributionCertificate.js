"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const get_1 = __importDefault(require("lodash/get"));
const node_forge_1 = __importDefault(require("node-forge"));
function getFingerprint({ dataBase64, password }) {
    const certData = getCertData(dataBase64, password);
    const certAsn1 = node_forge_1.default.pki.certificateToAsn1(certData);
    const certDer = node_forge_1.default.asn1.toDer(certAsn1).getBytes();
    const fingerprint = node_forge_1.default.md.sha1
        .create()
        .update(certDer)
        .digest()
        .toHex()
        .toUpperCase();
    return fingerprint;
}
exports.getFingerprint = getFingerprint;
function getCertData(certificateBase64, password) {
    const p12Der = node_forge_1.default.util.decode64(certificateBase64);
    const p12Asn1 = node_forge_1.default.asn1.fromDer(p12Der);
    let p12;
    try {
        p12 = node_forge_1.default.pkcs12.pkcs12FromAsn1(p12Asn1, password);
    }
    catch (_error) {
        const error = _error;
        if (error.message.match(/Invalid password/)) {
            throw new Error('Provided password for the distribution certificate is probably invalid');
        }
        else {
            throw error;
        }
    }
    const certBagType = node_forge_1.default.pki.oids.certBag;
    const certData = get_1.default(p12.getBags({ bagType: certBagType }), [certBagType, 0, 'cert']);
    if (!certData) {
        throw new Error('getCertData: couldn\'t find cert bag');
    }
    return certData;
}
//# sourceMappingURL=distributionCertificate.js.map