import { Readable } from 'stream';

import spawnAsync, { SpawnResult, SpawnOptions } from '@expo/spawn-async';
import bunyan from 'bunyan';

async function spawn(
  command: string,
  args: string[],
  options: SpawnOptions & {
    logger?: bunyan,
    stdoutOnly?: boolean;
  } = {
    stdio: 'inherit',
    cwd: process.cwd(),
  },
): Promise<SpawnResult> {
  const { logger } = options;
  if (logger) {
    options.stdio = 'pipe';
  }
  const promise = spawnAsync(command, args, options);
  if (logger && promise.child) {
    const streams = {
      stdout: promise.child.stdout,
      stderr: promise.child.stderr,
    };
    pipeOutputToLogger(logger, streams, options);
  }
  return promise;
}

function pipeOutputToLogger(
  logger: bunyan,
  { stdout, stderr }: { stdout?: Readable | null; stderr?: Readable | null } = {},
  { stdoutOnly = false } = {},
) {
  if (stdout) {
    stdout.on('data', (line) => logMultiline(logger.child({ source: 'stdout' }), line));
  }
  if (stderr) {
    const source = stdoutOnly ? 'stdout' : 'stderr';
    stderr.on('data', (line) => logMultiline(logger.child({ source }), line));
  }
}

function logMultiline(logger: bunyan, data: any) {
  if (!data) {
    return;
  }
  const lines = String(data).split('\n');
  lines.forEach((line) => {
    if (line) {
      logger.info(line);
    }
  });
}

export default spawn;
