import os from 'os';
import path from 'path';

import bunyan from 'bunyan';
import fs from 'fs-extra';
import uuid from 'uuid/v4';

import { BaseiOSJob } from './baseJob';
import * as distributionCertificateUtils from './utils/distributionCertificate';
import Keychain from './utils/keychain';
import ProvisioningProfile from './utils/provisioningProfile';

interface Credentials {
  bundleIdentifier: string;
  keychainPath: string;
  provisioningProfileUUID: string;
  teamId: string;
}

class iOSCredentialsManager {
  private job: BaseiOSJob;
  private logger: bunyan;
  private distributionCertificatePath: string;
  private provisioningProfile?: ProvisioningProfile;
  private keychain?: Keychain;
  private cleanedUp: boolean = false;

  constructor(logger: bunyan, job: BaseiOSJob) {
    this.logger = logger;
    this.job = job;
    this.distributionCertificatePath = path.join(os.tmpdir(), `${uuid()}.p12`);
  }

  public async prepare() {
    const { credentials } = this.job;

    this.logger.info('Getting distribution certificate fingerprint');
    const certificateFingerprint = distributionCertificateUtils.getFingerprint(credentials.distributionCertificate);

    this.logger.info(`Writing distribution certificate to ${this.distributionCertificatePath}`);
    await fs.writeFile(
      this.distributionCertificatePath,
      Buffer.from(credentials.distributionCertificate.dataBase64, 'base64'),
    );

    try {
      this.logger.info('Creating keychain');
      this.keychain = new Keychain(this.logger);
      await this.keychain.create();

      this.logger.info('Importing distribution certificate into the keychain');
      await this.keychain.importCertificate(
        this.distributionCertificatePath!,
        credentials.distributionCertificate.password,
      );

      this.logger.info('Initializing provisioning profile');
      this.provisioningProfile = new ProvisioningProfile(
        this.logger,
        Buffer.from(credentials.provisioningProfileBase64, 'base64'),
      );
      await this.provisioningProfile.init();

      this.logger.info('Validating whether distribution certificate has been imported successfully');
      await this.keychain.ensureCertificateImported(this.provisioningProfile.data.teamId, certificateFingerprint);

      this.logger.info('Verifying whether the distribution certificate and provisioning profile match');
      await this.provisioningProfile.verifyCertificate(certificateFingerprint);

      return {
        bundleIdentifier: this.provisioningProfile.data.bundleIdentifier,
        keychainPath: this.keychain.data.path,
        provisioningProfileUUID: this.provisioningProfile.data.uuid,
        teamId: this.provisioningProfile.data.teamId,
      };
    } catch (err) {
      await this.cleanUp();
      throw err;
    }
  }

  public async cleanUp() {
    if (this.cleanedUp) {
      return;
    }
    if (this.keychain) {
      await this.keychain.destroy();
    }
    if (this.provisioningProfile) {
      await this.provisioningProfile.destroy();
    }
    this.cleanedUp = true;
  }
}

export { Credentials, iOSCredentialsManager };
