import path from 'path';

import { BuilderCtx } from '../../../context';
import { setup } from '../../../utils/project';
import spawn from '../../../utils/spawn';
import { iOSCredentialsManager } from '../credentials';
import fastlane from '../utils/fastlane';
import { createIfNotExists as createGymfileIfNotExists } from '../utils/gymfile';
import { GenericiOSJob } from './job';

async function buildGeneric(ctx: BuilderCtx<GenericiOSJob>): Promise<string> {
  const { job, logger } = ctx;

  const { buildDirectory, nativeProjectDirectory } = await setup(ctx);

  logger.info('Installing pods');
  await spawn('pod', ['install'], { cwd: nativeProjectDirectory, logger });

  const credentialsManager = new iOSCredentialsManager(ctx.logger, job);
  try {
    logger.info('Preparing credentials');
    const credentials = await credentialsManager.prepare();

    logger.info('Creating Gymfile if not exists');
    const createdGymfile = await createGymfileIfNotExists(
      credentials,
      {
        nativeProjectDirectory,
        outputName: job.outputName,
        outputDirectory: './build',
      },
    );

    if (createdGymfile) {
      logger.info('Gymfile created');
    } else {
      logger.info('Gymfile for the project already exists');
    }

    logger.info('Running build');
    await fastlane(['gym'], {
      cwd: nativeProjectDirectory,
      logger,
    });

    return path.join(buildDirectory, job.artifactPath);
  } finally {
    await credentialsManager.cleanUp();
  }
}

export default buildGeneric;
