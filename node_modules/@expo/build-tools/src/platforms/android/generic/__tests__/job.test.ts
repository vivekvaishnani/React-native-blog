import { GenericAndroidJobSchema } from '../job';

const joiOptions = {
  stripUnknown: true,
  convert: true,
  abortEarly: false,
};

const androidCredentials = {
  keystore: {
    keystoreDataBase64: 'MjEzNwo=',
    keystorePath: 'android/keystores/release.keystore',
    keystorePassword: 'pass1',
    keyAlias: 'alias',
    keyPassword: 'pass2',
  },
};

describe('Validate build configs with joi', () => {
  describe('generic build', () => {
    it('should be valid', async () => {
      const build = {
        credentials: androidCredentials,
        platform: 'android',
        type: 'generic',
        projectUrl: 'http://localhost:3000',
        gradleCommand: 'buildRelease',
        artifactPath: './android/app/build/output',
      };

      const { value, error } = GenericAndroidJobSchema.validate(build, joiOptions);
      expect(value).toMatchObject(build);
      expect(error).toBeFalsy();
    });

    it('should return error', async () => {
      const build = {
        credentials: androidCredentials,
        platform: 'android',
        type: 'generic',
        projectUrl: 'url',
        gradleCommand: 1,
        uknownField: 'field',
      };

      const { value, error } = GenericAndroidJobSchema.validate(build, joiOptions);
      expect(error.message).toBe('"projectUrl\" must be a valid uri. \"gradleCommand\" must be a string');
      expect(value).not.toMatchObject(build);
    });
  });
});
