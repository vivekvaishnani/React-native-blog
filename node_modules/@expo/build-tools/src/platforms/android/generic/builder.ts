import path from 'path';

import { BuilderCtx } from '../../../context';
import { setup } from '../../../utils/project';
import spawn from '../../../utils/spawn';
import { saveKeystore } from '../utils/buildConfig';
import { GenericAndroidJob } from './job';

async function buildGeneric(ctx: BuilderCtx<GenericAndroidJob>): Promise<string> {
  const { job, logger } = ctx;

  const { buildDirectory, nativeProjectDirectory } = await setup(ctx);

  logger.info('Writing keystore to the project\'s directory');
  const { credentials: { keystore } } = job;
  const keystorePath = path.join(buildDirectory, keystore.keystorePath);
  await saveKeystore(keystore, keystorePath);

  logger.info('Starting gradle build');
  const keystoreEnvs = {
    KEYSTORE_PASSWORD: keystore.keystorePassword,
    KEY_ALIAS: keystore.keyAlias,
    KEY_PASSWORD: keystore.keyPassword,
  };
  logger.debug(`Running './gradlew ${job.gradleCommand}' in ${nativeProjectDirectory}`);
  await spawn(
    './gradlew',
    [job.gradleCommand],
    {
      cwd: nativeProjectDirectory,
      logger,
      env: {
        ...process.env,
        ...keystoreEnvs,
      },
    },
  );

  return path.join(buildDirectory, job.artifactPath);
}

export default buildGeneric;
