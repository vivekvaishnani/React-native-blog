{"version":3,"file":"Config.js","sourceRoot":"","sources":["../src/Config.ts"],"names":[],"mappings":"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","sourcesContent":["import JsonFile, { JSONObject } from '@expo/json-file';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport slug from 'slugify';\n\nimport { AppJSONConfig, ExpRc, ExpoConfig, PackageJSONConfig, ProjectConfig } from './Config.types';\nimport { ConfigError } from './Errors';\nimport { getExpoSDKVersion } from './Project';\n\nexport function readConfigJson(\n  projectRoot: string,\n  skipValidation: boolean = false,\n  skipNativeValidation: boolean = false\n): ProjectConfig {\n  const { configPath } = findConfigFile(projectRoot);\n  let rawConfig: JSONObject | null = null;\n  try {\n    rawConfig = JsonFile.read(configPath, { json5: true });\n  } catch (_) {}\n  const { rootConfig, exp } = parseAndValidateRootConfig(rawConfig, skipValidation);\n  const packageJsonPath = getRootPackageJsonPath(projectRoot, exp);\n  const pkg = JsonFile.read(packageJsonPath);\n\n  return {\n    ...ensureConfigHasDefaultValues(projectRoot, exp, pkg, skipNativeValidation),\n    rootConfig: rootConfig as AppJSONConfig,\n  };\n}\n\nexport async function readConfigJsonAsync(\n  projectRoot: string,\n  skipValidation: boolean = false,\n  skipNativeValidation: boolean = false\n): Promise<ProjectConfig> {\n  const { configPath } = findConfigFile(projectRoot);\n  let rawConfig: JSONObject | null = null;\n  try {\n    rawConfig = await JsonFile.readAsync(configPath, { json5: true });\n  } catch (_) {}\n  const { rootConfig, exp } = parseAndValidateRootConfig(rawConfig, skipValidation);\n  const packageJsonPath = getRootPackageJsonPath(projectRoot, exp);\n  const pkg = await JsonFile.readAsync(packageJsonPath);\n\n  return {\n    ...ensureConfigHasDefaultValues(projectRoot, exp, pkg, skipNativeValidation),\n    rootConfig: rootConfig as AppJSONConfig,\n  };\n}\n\nexport function findConfigFile(\n  projectRoot: string\n): { configPath: string; configName: string; configNamespace: 'expo' } {\n  const APP_JSON_FILE_NAME = 'app.json';\n\n  let configPath;\n  if (customConfigPaths[projectRoot]) {\n    configPath = customConfigPaths[projectRoot];\n  } else {\n    configPath = path.join(projectRoot, APP_JSON_FILE_NAME);\n  }\n  return { configPath, configName: APP_JSON_FILE_NAME, configNamespace: 'expo' };\n}\n\nexport function configFilename(projectRoot: string): string {\n  return findConfigFile(projectRoot).configName;\n}\n\nexport async function readExpRcAsync(projectRoot: string): Promise<ExpRc> {\n  const expRcPath = path.join(projectRoot, '.exprc');\n  return await JsonFile.readAsync(expRcPath, { json5: true, cantReadFileDefault: {} });\n}\n\nconst customConfigPaths: { [projectRoot: string]: string } = {};\n\nexport function setCustomConfigPath(projectRoot: string, configPath: string): void {\n  customConfigPaths[projectRoot] = configPath;\n}\n\nconst APP_JSON_EXAMPLE = JSON.stringify({\n  expo: {\n    name: 'My app',\n    slug: 'my-app',\n    sdkVersion: '...',\n  },\n});\n\nfunction parseAndValidateRootConfig(\n  rootConfig: JSONObject | null,\n  skipValidation: boolean\n): { exp: ExpoConfig; rootConfig: JSONObject } {\n  let outputRootConfig: JSONObject | null = rootConfig;\n  if (outputRootConfig === null || typeof outputRootConfig !== 'object') {\n    if (skipValidation) {\n      outputRootConfig = { expo: {} };\n    } else {\n      throw new ConfigError('app.json must include a JSON object.', 'NOT_OBJECT');\n    }\n  }\n  const exp = outputRootConfig.expo as ExpoConfig;\n  if (exp === null || typeof exp !== 'object') {\n    throw new ConfigError(\n      `Property 'expo' in app.json is not an object. Please make sure app.json includes a managed Expo app config like this: ${APP_JSON_EXAMPLE}`,\n      'NO_EXPO'\n    );\n  }\n  return {\n    exp,\n    rootConfig: outputRootConfig,\n  };\n}\n\nfunction getRootPackageJsonPath(projectRoot: string, exp: ExpoConfig): string {\n  const packageJsonPath =\n    'nodeModulesPath' in exp && typeof exp.nodeModulesPath === 'string'\n      ? path.join(path.resolve(projectRoot, exp.nodeModulesPath), 'package.json')\n      : path.join(projectRoot, 'package.json');\n  if (!fs.existsSync(packageJsonPath)) {\n    throw new ConfigError(\n      `The expected package.json path: ${packageJsonPath} does not exist`,\n      'MODULE_NOT_FOUND'\n    );\n  }\n  return packageJsonPath;\n}\n\nfunction ensureConfigHasDefaultValues(\n  projectRoot: string,\n  exp: ExpoConfig,\n  pkg: JSONObject,\n  skipNativeValidation: boolean = false\n): { exp: ExpoConfig; pkg: PackageJSONConfig } {\n  if (!exp) exp = {};\n\n  if (!exp.name && typeof pkg.name === 'string') {\n    exp.name = pkg.name;\n  }\n\n  if (!exp.description && typeof pkg.description === 'string') {\n    exp.description = pkg.description;\n  }\n\n  if (!exp.slug && typeof exp.name === 'string') {\n    exp.slug = slug(exp.name.toLowerCase());\n  }\n\n  if (!exp.version && typeof pkg.version === 'string') {\n    exp.version = pkg.version;\n  }\n\n  if (exp.nodeModulesPath) {\n    exp.nodeModulesPath = path.resolve(projectRoot, exp.nodeModulesPath);\n  }\n\n  try {\n    exp.sdkVersion = getExpoSDKVersion(projectRoot, exp);\n  } catch (error) {\n    if (!skipNativeValidation) throw error;\n  }\n\n  if (!exp.platforms) {\n    exp.platforms = ['android', 'ios'];\n  }\n\n  return { exp, pkg };\n}\n\nexport async function writeConfigJsonAsync(\n  projectRoot: string,\n  options: Object\n): Promise<ProjectConfig> {\n  const { configPath } = findConfigFile(projectRoot);\n  let { exp, pkg, rootConfig } = await readConfigJsonAsync(projectRoot);\n  exp = { ...exp, ...options };\n  rootConfig = { ...rootConfig, expo: exp };\n\n  await JsonFile.writeAsync(configPath, rootConfig, { json5: false });\n\n  return {\n    exp,\n    pkg,\n    rootConfig,\n  };\n}\n"]}