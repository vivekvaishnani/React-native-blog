{"version":3,"file":"ExpoDefinePlugin.js","sourceRoot":"","sources":["../../src/plugins/ExpoDefinePlugin.ts"],"names":[],"mappings":";;AAAA,yCAAsE;AACtE,qCAAuC;AAGvC,gCAAsE;AAOtE,SAAgB,uBAAuB,CACrC,IAAU,EACV,UAAkB,EAClB,iBAA6B;IAE7B,MAAM,WAAW,GAAG,IAAI,IAAI,aAAa,CAAC;IAC1C,MAAM,OAAO,GAAG,WAAW,KAAK,YAAY,CAAC;IAE7C,MAAM,aAAa,GAAG,6BAA6B,CAAC;IAEpD,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;SACxC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACtC,MAAM,CACL,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QACX,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5C,OAAO,GAAG,CAAC;IACb,CAAC,EACD;QACE;;;WAGG;QACH,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;QAErC;;;;;WAKG;QACH,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;QAEtC;;;WAGG;QACH,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC;KACnB,CAC/B,CAAC;IACJ,OAAO;QACL,aAAa,EAAE,UAAU;QACzB,OAAO;KACR,CAAC;AACJ,CAAC;AA3CD,0DA2CC;AAED;;;GAGG;AACH,MAAqB,gBAAiB,SAAQ,sBAAY;IAkBxD,YAAY,EACV,IAAI,EACJ,SAAS,EACT,sBAAsB,EACtB,MAAM,GAMP;QACC,MAAM,iBAAiB,GAAG,mCAA0B,CAAC,MAAM,EAAE,sBAAsB,CAAC,CAAC;QAErF,MAAM,oBAAoB,GAAG,uBAAuB,CAAC,IAAI,EAAE,SAAS,EAAE,iBAAiB,CAAC,CAAC;QAEzF,KAAK,CAAC,oBAAoB,CAAC,CAAC;IAC9B,CAAC;;AAlCH,mCAmCC;AAlCQ,wCAAuB,GAAG,uBAAuB,CAAC;AAClD,wBAAO,GAAG,CACf,GAAuE,EACrD,EAAE;IACpB,MAAM,IAAI,GAAG,aAAO,CAAC,GAAG,CAAC,CAAC;IAC1B,MAAM,EAAE,SAAS,EAAE,GAAG,oBAAc,CAAC,GAAG,CAAC,CAAC;IAC1C,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,IAAI,eAAS,CAAC,GAAG,CAAC,CAAC;IAC5C,MAAM,SAAS,GAAG,GAAG,CAAC,SAAS,IAAI,cAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAC7D,MAAM,sBAAsB,GAAG,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC;IAC7D,OAAO,IAAI,gBAAgB,CAAC;QAC1B,IAAI;QACJ,SAAS;QACT,MAAM;QACN,sBAAsB;KACvB,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { ExpoConfig, createEnvironmentConstants } from '@expo/config';\nimport { DefinePlugin } from 'webpack';\n\nimport { Environment, Mode } from '../types';\nimport { getConfig, getMode, getPaths, getPublicPaths } from '../env';\n\nexport interface ClientEnv {\n  __DEV__: boolean;\n  'process.env': { [key: string]: string };\n}\n\nexport function createClientEnvironment(\n  mode: Mode,\n  publicPath: string,\n  nativeAppManifest: ExpoConfig\n): ClientEnv {\n  const environment = mode || 'development';\n  const __DEV__ = environment !== 'production';\n\n  const ENV_VAR_REGEX = /^(EXPO_|REACT_NATIVE_|CI$)/i;\n\n  const processEnv = Object.keys(process.env)\n    .filter(key => ENV_VAR_REGEX.test(key))\n    .reduce(\n      (env, key) => {\n        env[key] = JSON.stringify(process.env[key]);\n        return env;\n      },\n      {\n        /**\n         * Useful for determining whether weâ€™re running in production mode.\n         * Most importantly, it switches React into the correct mode.\n         */\n        NODE_ENV: JSON.stringify(environment),\n\n        /**\n         * Useful for resolving the correct path to static assets in `public`.\n         * For example, <img src={process.env.PUBLIC_URL + '/img/logo.png'} />.\n         * This should only be used as an escape hatch. Normally you would put\n         * images into the root folder and `import` them in code to get their paths.\n         */\n        PUBLIC_URL: JSON.stringify(publicPath),\n\n        /**\n         * Surfaces the `app.json` (config) as an environment variable which is then parsed by\n         * `expo-constants` https://docs.expo.io/versions/latest/sdk/constants/\n         */\n        APP_MANIFEST: JSON.stringify(nativeAppManifest),\n      } as { [key: string]: string }\n    );\n  return {\n    'process.env': processEnv,\n    __DEV__,\n  };\n}\n\n/**\n * Required for `expo-constants` https://docs.expo.io/versions/latest/sdk/constants/\n * This surfaces the `app.json` (config) as an environment variable which is then parsed by `expo-constants`.\n */\nexport default class ExpoDefinePlugin extends DefinePlugin {\n  static createClientEnvironment = createClientEnvironment;\n  static fromEnv = (\n    env: Pick<Environment, 'projectRoot' | 'mode' | 'config' | 'locations'>\n  ): ExpoDefinePlugin => {\n    const mode = getMode(env);\n    const { publicUrl } = getPublicPaths(env);\n    const config = env.config || getConfig(env);\n    const locations = env.locations || getPaths(env.projectRoot);\n    const productionManifestPath = locations.production.manifest;\n    return new ExpoDefinePlugin({\n      mode,\n      publicUrl,\n      config,\n      productionManifestPath,\n    });\n  };\n\n  constructor({\n    mode,\n    publicUrl,\n    productionManifestPath,\n    config,\n  }: {\n    mode: Mode;\n    publicUrl: string;\n    productionManifestPath: string;\n    config: ExpoConfig;\n  }) {\n    const publicAppManifest = createEnvironmentConstants(config, productionManifestPath);\n\n    const environmentVariables = createClientEnvironment(mode, publicUrl, publicAppManifest);\n\n    super(environmentVariables);\n  }\n}\n"]}