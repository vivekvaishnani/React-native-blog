{"version":3,"file":"withUnimodules.js","sourceRoot":"","sources":["../../src/addons/withUnimodules.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\n\nimport {\n  getConfig,\n  getMode,\n  getModuleFileExtensions,\n  getPaths,\n  getPublicPaths,\n  validateEnvironment,\n} from '../env';\nimport { createBabelLoader, createFontLoader } from '../loaders';\nimport { ExpoDefinePlugin } from '../plugins';\nimport { AnyConfiguration, Arguments, Environment, InputEnvironment } from '../types';\nimport { rulesMatchAnyFiles } from '../utils';\nimport withAlias from './withAlias';\nimport withEntry from './withEntry';\n\n// import ManifestPlugin from 'webpack-manifest-plugin';\n\n// Wrap your existing webpack config with support for Unimodules.\n// ex: Storybook `({ config }) => withUnimodules(config)`\nexport default function withUnimodules(\n  inputWebpackConfig: AnyConfiguration = {},\n  env: InputEnvironment = {},\n  argv: Arguments = {}\n): AnyConfiguration {\n  inputWebpackConfig = withAlias(inputWebpackConfig);\n\n  if (!inputWebpackConfig.module) inputWebpackConfig.module = { rules: [] };\n  else if (!inputWebpackConfig.module.rules)\n    inputWebpackConfig.module = { ...inputWebpackConfig.module, rules: [] };\n\n  if (!inputWebpackConfig.plugins) inputWebpackConfig.plugins = [];\n  if (!inputWebpackConfig.resolve) inputWebpackConfig.resolve = {};\n  if (!inputWebpackConfig.output) inputWebpackConfig.output = {};\n\n  // @ts-ignore: We should attempt to use the project root that the other config is already using (used for Gatsby support).\n  env.projectRoot = env.projectRoot || inputWebpackConfig.context;\n\n  // Attempt to use the input webpack config mode\n  env.mode = env.mode || inputWebpackConfig.mode;\n\n  const environment: Environment = validateEnvironment(env);\n\n  let { supportsFontLoading } = argv;\n\n  // If the args don't specify this then we'll check if the input already supports font loading.\n  if (typeof supportsFontLoading === 'undefined') {\n    const supportedFonts = ['ttf', 'otf', 'woff', 'woff2', 'eot'];\n    const testFontFileNames = supportedFonts.map(ext =>\n      path.resolve(environment.projectRoot, `cool-font.${ext}`)\n    );\n    if (rulesMatchAnyFiles(inputWebpackConfig, testFontFileNames)) {\n      supportsFontLoading = false;\n    }\n  }\n\n  const { platform = 'web' } = env;\n\n  const config = argv.expoConfig || getConfig(environment);\n\n  const locations = env.locations || getPaths(environment.projectRoot);\n  const mode = getMode(env);\n\n  const { build: buildConfig = {} } = config.web || {};\n  const { babel: babelAppConfig = {} } = buildConfig;\n\n  const babelProjectRoot = babelAppConfig.root || locations.root;\n\n  const babelLoader = createBabelLoader({\n    mode,\n    platform,\n    babelProjectRoot,\n    verbose: babelAppConfig.verbose,\n    include: babelAppConfig.include,\n    use: babelAppConfig.use,\n  });\n\n  function reuseOrCreatePublicPaths() {\n    if (inputWebpackConfig.output && inputWebpackConfig.output.publicPath) {\n      const publicPath = inputWebpackConfig.output.publicPath;\n      return {\n        publicPath,\n        publicUrl: publicPath.endsWith('/') ? publicPath.slice(0, -1) : publicPath,\n      };\n    }\n    return getPublicPaths(environment);\n  }\n\n  const { publicPath, publicUrl } = reuseOrCreatePublicPaths();\n\n  inputWebpackConfig.mode = mode;\n\n  inputWebpackConfig.output = {\n    // This is the URL that app is served from.\n    // We use \"/\" in development.\n    ...inputWebpackConfig.output,\n    publicPath,\n  };\n\n  inputWebpackConfig.plugins.push(\n    // Generate a manifest file which contains a mapping of all asset filenames\n    // to their corresponding output file so that tools can pick it up without\n    // having to parse `index.html`.\n    // new ManifestPlugin({\n    //   fileName: 'asset-manifest.json',\n    //   publicPath,\n    // }),\n\n    // Used for surfacing information related to constants\n    new ExpoDefinePlugin({\n      mode,\n      publicUrl,\n      config,\n      productionManifestPath: locations.production.manifest,\n    })\n  );\n\n  const rules = [\n    ...inputWebpackConfig.module.rules,\n\n    // TODO: Bacon: Auto remove this loader\n    {\n      test: /\\.html$/,\n      use: ['html-loader'],\n      exclude: locations.template.folder,\n    },\n    // Process application code with Babel.\n    babelLoader,\n\n    supportsFontLoading && createFontLoader(locations.root, locations.includeModule),\n  ].filter(Boolean);\n\n  inputWebpackConfig.module = {\n    ...inputWebpackConfig.module,\n    rules,\n  };\n\n  inputWebpackConfig.resolve = {\n    ...inputWebpackConfig.resolve,\n    symlinks: false,\n    // Support platform extensions like .web.js\n    extensions: getModuleFileExtensions('web'),\n  };\n\n  // We have to transpile these modules and make them not external too.\n  // We have to do this because next.js by default externals all `node_modules`'s js files.\n  // Reference:\n  // https://github.com/martpie/next-transpile-modules/blob/77450a0c0307e4b650d7acfbc18641ef9465f0da/index.js#L48-L62\n  // https://github.com/zeit/next.js/blob/0b496a45e85f3c9aa3cf2e77eef10888be5884fc/packages/next/build/webpack-config.ts#L185-L258\n  // `include` function is from https://github.com/expo/expo-cli/blob/3933f3d6ba65bffec2738ece71b62f2c284bd6e4/packages/webpack-config/webpack/loaders/createBabelLoaderAsync.js#L76-L96\n  const includeFunc = babelLoader.include as (path: string) => boolean;\n  if (inputWebpackConfig.externals) {\n    inputWebpackConfig.externals = (inputWebpackConfig.externals as any).map((external: any) => {\n      if (typeof external !== 'function') return external;\n      return (ctx: any, req: any, cb: any) => {\n        const relPath = path.join('node_modules', req);\n        return includeFunc(relPath) ? cb() : external(ctx, req, cb);\n      };\n    });\n  }\n\n  // Add a loose requirement on the ResizeObserver polyfill if it's installed...\n  inputWebpackConfig = withEntry(inputWebpackConfig, env, {\n    entryPath: 'resize-observer-polyfill/dist/ResizeObserver.global',\n  });\n\n  return inputWebpackConfig;\n}\n"]}