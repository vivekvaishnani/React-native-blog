{"version":3,"file":"withDevServer.js","sourceRoot":"","sources":["../../src/addons/withDevServer.ts"],"names":[],"mappings":";;;;;AAAA,oGAA4E;AAC5E,aAAa;AACb,sGAA8E;AAC9E,8GAAsF;AAQtF,gCAAkC;AAElC,aAAa;AACb,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,SAAS,CAAC;AAE3C,SAAgB,WAAW,CAAC,KAAuB;IACjD,OAAO,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,aAAa,CAAC;AAC/C,CAAC;AAFD,kCAEC;AASD,SAAwB,aAAa,CACnC,MAAwB,EACxB,GAAiB,EACjB,UAA4B,EAAE;IAE9B,IAAI,WAAW,CAAC,MAAM,CAAC,EAAE;QACvB,MAAM,CAAC,SAAS,GAAG,eAAe,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;KAClD;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AATD,gCASC;AAED,SAAgB,eAAe,CAC7B,GAAiB,EACjB,EAAE,WAAW,EAAE,KAAK,KAAuB,EAAE;IAE7C,MAAM,EAAE,KAAK,GAAG,KAAK,EAAE,GAAG,GAAG,CAAC;IAC9B,MAAM,SAAS,GAAG,GAAG,CAAC,SAAS,IAAI,cAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAC7D,oHAAoH;IACpH,OAAO;QACL,8CAA8C;QAC9C,QAAQ,EAAE,IAAI;QACd,0EAA0E;QAC1E,oEAAoE;QACpE,cAAc,EAAE,MAAM;QACtB,0JAA0J;QAC1J,2EAA2E;QAC3E,4EAA4E;QAC5E,4EAA4E;QAC5E,0EAA0E;QAC1E,wEAAwE;QACxE,2EAA2E;QAC3E,2EAA2E;QAC3E,6EAA6E;QAC7E,iEAAiE;QACjE,2EAA2E;QAC3E,wEAAwE;QACxE,wEAAwE;QACxE,4EAA4E;QAC5E,yEAAyE;QACzE,WAAW,EAAE,SAAS,CAAC,QAAQ,CAAC,MAAM;QACtC,sEAAsE;QACtE,gBAAgB,EAAE,IAAI;QACtB,sEAAsE;QACtE,sEAAsE;QACtE,qEAAqE;QACrE,mEAAmE;QACnE,0EAA0E;QAC1E,GAAG,EAAE,IAAI;QACT,uEAAuE;QACvE,yEAAyE;QACzE,UAAU,EAAE,GAAG;QACf,yEAAyE;QACzE,kFAAkF;QAClF,KAAK,EAAE,IAAI;QAEX,IAAI;QACJ,OAAO,EAAE,KAAK;QACd,kBAAkB,EAAE;YAClB,yDAAyD;YACzD,+DAA+D;YAC/D,cAAc,EAAE,IAAI;SACrB;QACD,MAAM,EAAE,WAAW;QACnB,KAAK;QAEL,MAAM,CAAC,GAAG,EAAE,MAAM;YAChB,yCAAyC;YACzC,iEAAiE;YACjE,oCAAoC;YACpC,IAAI;YAEJ,wEAAwE;YACxE,GAAG,CAAC,GAAG,CAAC,iCAAuB,CAAC,MAAM,CAAC,CAAC,CAAC;YACzC,0DAA0D;YAC1D,GAAG,CAAC,GAAG,CAAC,gCAAsB,EAAE,CAAC,CAAC;YAElC,wEAAwE;YACxE,yEAAyE;YACzE,qEAAqE;YACrE,kCAAkC;YAClC,2FAA2F;YAC3F,GAAG,CAAC,GAAG,CAAC,qCAA2B,EAAE,CAAC,CAAC;QACzC,CAAC;QAED,qLAAqL;QAErL,kEAAkE;QAClE,+BAA+B;QAE/B,KAAK;QACL,gBAAgB,EAAE,CAAC,KAAK;QACxB,qCAAqC;QACrC,OAAO,EAAE;YACP,6BAA6B,EAAE,GAAG;YAClC,8BAA8B,EAAE,wCAAwC;YACxE,8BAA8B,EAAE,+CAA+C;SAChF;KACF,CAAC;AACJ,CAAC;AAvFD,0CAuFC","sourcesContent":["import errorOverlayMiddleware from 'react-dev-utils/errorOverlayMiddleware';\n// @ts-ignore\nimport evalSourceMapMiddleware from 'react-dev-utils/evalSourceMapMiddleware';\nimport noopServiceWorkerMiddleware from 'react-dev-utils/noopServiceWorkerMiddleware';\nimport {\n  ProxyConfigArray,\n  ProxyConfigMap,\n  Configuration as WebpackDevServerConfiguration,\n} from 'webpack-dev-server';\n\nimport { AnyConfiguration, DevConfiguration, Environment } from '../types';\nimport { getPaths } from '../env';\n\n// @ts-ignore\nconst host = process.env.HOST || '0.0.0.0';\n\nexport function isDevConfig(input: AnyConfiguration): input is DevConfiguration {\n  return input && input.mode === 'development';\n}\n\ntype SelectiveEnv = Pick<Environment, 'locations' | 'projectRoot' | 'https'>;\n\ntype DevServerOptions = {\n  allowedHost?: string;\n  proxy?: ProxyConfigMap | ProxyConfigArray;\n};\n\nexport default function withDevServer(\n  config: AnyConfiguration,\n  env: SelectiveEnv,\n  options: DevServerOptions = {}\n): AnyConfiguration {\n  if (isDevConfig(config)) {\n    config.devServer = createDevServer(env, options);\n  }\n  return config;\n}\n\nexport function createDevServer(\n  env: SelectiveEnv,\n  { allowedHost, proxy }: DevServerOptions = {}\n): WebpackDevServerConfiguration {\n  const { https = false } = env;\n  const locations = env.locations || getPaths(env.projectRoot);\n  // https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/config/webpackDevServer.config.js\n  return {\n    // Enable gzip compression of generated files.\n    compress: true,\n    // Silence WebpackDevServer's own logs since they're generally not useful.\n    // It will still show compile warnings and errors with this setting.\n    clientLogLevel: 'none',\n    // https://github.com/facebook/create-react-app/blob/e59e0920f3bef0c2ac47bbf6b4ff3092c8ff08fb/packages/react-scripts/config/webpackDevServer.config.js#L46\n    // By default WebpackDevServer serves physical files from current directory\n    // in addition to all the virtual build products that it serves from memory.\n    // This is confusing because those files wonâ€™t automatically be available in\n    // production build folder unless we copy them. However, copying the whole\n    // project directory is dangerous because we may expose sensitive files.\n    // Instead, we establish a convention that only files in `public` directory\n    // get served. Our build script will copy `public` into the `build` folder.\n    // In `index.html`, you can get URL of `public` folder with %WEB_PUBLIC_URL%:\n    // <link rel=\"shortcut icon\" href=\"%WEB_PUBLIC_URL%/favicon.ico\">\n    // In JavaScript code, you can access it with `process.env.WEB_PUBLIC_URL`.\n    // Note that we only recommend to use `public` folder as an escape hatch\n    // for files like `favicon.ico`, `manifest.json`, and libraries that are\n    // for some reason broken when imported through Webpack. If you just want to\n    // use an image, put it in `src` and `import` it from JavaScript instead.\n    contentBase: locations.template.folder,\n    // By default files from `contentBase` will not trigger a page reload.\n    watchContentBase: true,\n    // Enable hot reloading server. It will provide /sockjs-node/ endpoint\n    // for the WebpackDevServer client so it can learn when the files were\n    // updated. The WebpackDevServer client is included as an entry point\n    // in the Webpack development configuration. Note that only changes\n    // to CSS are currently hot reloaded. JS changes will refresh the browser.\n    hot: true,\n    // It is important to tell WebpackDevServer to use the same \"root\" path\n    // as we specified in the config. In development, we always serve from /.\n    publicPath: '/',\n    // WebpackDevServer is noisy by default so we emit custom message instead\n    // by listening to the compiler events with `compiler.hooks[...].tap` calls above.\n    quiet: true,\n\n    host,\n    overlay: false,\n    historyApiFallback: {\n      // Paths with dots should still use the history fallback.\n      // See https://github.com/facebook/create-react-app/issues/387.\n      disableDotRule: true,\n    },\n    public: allowedHost,\n    proxy,\n\n    before(app, server) {\n      // if (fs.existsSync(paths.proxySetup)) {\n      //   // This registers user provided middleware for proxy reasons\n      //   require(paths.proxySetup)(app);\n      // }\n\n      // This lets us fetch source contents from webpack for the error overlay\n      app.use(evalSourceMapMiddleware(server));\n      // This lets us open files from the runtime error overlay.\n      app.use(errorOverlayMiddleware());\n\n      // This service worker file is effectively a 'no-op' that will reset any\n      // previous service worker registered for the same host:port combination.\n      // We do this in development to avoid hitting the production cache if\n      // it used the same host and port.\n      // https://github.com/facebookincubator/create-react-app/issues/2272#issuecomment-302832432\n      app.use(noopServiceWorkerMiddleware());\n    },\n\n    // We don't use watchOptions: https://github.com/facebook/create-react-app/blob/e59e0920f3bef0c2ac47bbf6b4ff3092c8ff08fb/packages/react-scripts/config/webpackDevServer.config.js#L79\n\n    // Enable HTTPS if the HTTPS environment variable is set to 'true'\n    // https: protocol === 'https',\n\n    https,\n    disableHostCheck: !proxy,\n    // allowedHosts: [host, 'localhost'],\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, PATCH, OPTIONS',\n      'Access-Control-Allow-Headers': 'X-Requested-With, content-type, Authorization',\n    },\n  };\n}\n"]}