{"version":3,"file":"createAllLoaders.js","sourceRoot":"","sources":["../../src/loaders/createAllLoaders.ts"],"names":[],"mappings":"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","sourcesContent":["import { Rule } from 'webpack';\n\nimport { ExpoConfig } from '@expo/config';\nimport { Environment, FilePaths, Mode } from '../types';\nimport { getConfig, getMode, getPaths } from '../env';\nimport createBabelLoader from './createBabelLoader';\nimport createFontLoader from './createFontLoader';\n\n// This is needed for webpack to import static images in JavaScript files.\n// \"url\" loader works like \"file\" loader except that it embeds assets\n// smaller than specified limit in bytes as data URLs to avoid requests.\n// A missing `test` is equivalent to a match.\n// TODO: Bacon: Move SVG\nexport const imageLoaderRule: Rule = {\n  test: /\\.(gif|jpe?g|png|svg)$/,\n  use: {\n    loader: require.resolve('url-loader'),\n    options: {\n      // Inline resources as Base64 when there is less reason to parallelize their download. The\n      // heuristic we use is whether the resource would fit within a TCP/IP packet that we would\n      // send to request the resource.\n      //\n      // An Ethernet MTU is usually 1500. IP headers are 20 (v4) or 40 (v6) bytes and TCP\n      // headers are 40 bytes. HTTP response headers vary and are around 400 bytes. This leaves\n      // about 1000 bytes for content to fit in a packet.\n      limit: 1000,\n      name: 'static/media/[name].[hash:8].[ext]',\n    },\n  },\n};\n\n// \"file\" loader makes sure those assets get served by WebpackDevServer.\n// When you `import` an asset, you get its (virtual) filename.\n// In production, they would get copied to the `build` folder.\n// This loader doesn't use a \"test\" so it will catch all modules\n// that fall through the other loaders.\nexport const fallbackLoaderRule: Rule = {\n  loader: require.resolve('file-loader'),\n  // Exclude `js` files to keep \"css\" loader working as it injects\n  // its runtime that would otherwise be processed through \"file\" loader.\n  // Also exclude `html` and `json` extensions so they get processed\n  // by webpacks internal loaders.\n\n  // Excludes: js, jsx, ts, tsx, html, json\n  exclude: [/\\.(mjs|[jt]sx?)$/, /\\.html$/, /\\.json$/],\n  options: {\n    name: 'static/media/[name].[hash:8].[ext]',\n  },\n};\n\nexport const styleLoaderRule: Rule = {\n  test: /\\.(css)$/,\n  use: [require.resolve('style-loader'), require.resolve('css-loader')],\n};\n\nexport default function createAllLoaders(env: Environment): Rule[] {\n  const config = getConfig(env);\n  const mode = getMode(env);\n  const { platform = 'web' } = env;\n\n  const locations = env.locations || getPaths(env.projectRoot);\n\n  return getAllLoaderRules(config, mode, locations, platform);\n}\n\nexport function getBabelLoaderRuleFromEnv(env: Environment): Rule {\n  const config = getConfig(env);\n  const mode = getMode(env);\n  const { platform = 'web' } = env;\n\n  const locations = env.locations || getPaths(env.projectRoot);\n\n  return getBabelLoaderRule(locations.root, config, mode, platform);\n}\n\nexport function getBabelLoaderRule(\n  projectRoot: string,\n  { web: { build: { babel = {} } = {} } = {} }: ExpoConfig,\n  mode: Mode,\n  platform: string = 'web'\n): Rule {\n  const { root, verbose, include, use } = babel;\n\n  const babelProjectRoot = root || projectRoot;\n\n  return createBabelLoader({\n    mode,\n    platform,\n    babelProjectRoot,\n    verbose,\n    include,\n    use,\n  });\n}\n\nexport function getHtmlLoaderRule(exclude: string): Rule {\n  return {\n    test: /\\.html$/,\n    use: [require.resolve('html-loader')],\n    exclude,\n  };\n}\n\nexport function getAllLoaderRules(\n  config: ExpoConfig,\n  mode: Mode,\n  { root, includeModule, template }: FilePaths,\n  platform: string = 'web'\n): Rule[] {\n  return [\n    getHtmlLoaderRule(template.folder),\n    imageLoaderRule,\n    getBabelLoaderRule(root, config, mode, platform),\n    createFontLoader(root, includeModule),\n    styleLoaderRule,\n    // This needs to be the last loader\n    fallbackLoaderRule,\n  ].filter(Boolean);\n}\n"]}