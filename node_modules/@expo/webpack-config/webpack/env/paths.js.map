{"version":3,"file":"paths.js","sourceRoot":"","sources":["../../src/env/paths.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-env node */\n\nimport { ExpoConfig, getWebOutputPath, readConfigJson, readConfigJsonAsync } from '@expo/config';\nimport fs from 'fs';\nimport path from 'path';\nimport url from 'url';\n\nimport {\n  ensureSlash,\n  getAbsolutePathWithProjectRoot,\n  getEntryPoint,\n  getModulesPath,\n  getPossibleProjectRoot,\n} from '@expo/config/paths';\nimport { Environment, FilePaths } from '../types';\nimport getMode from './getMode';\n\nfunction parsePaths(projectRoot: string, nativeAppManifest?: ExpoConfig): FilePaths {\n  const inputProjectRoot = projectRoot || getPossibleProjectRoot();\n\n  function absolute(...pathComponents: string[]): string {\n    return getAbsolutePathWithProjectRoot(inputProjectRoot, ...pathComponents);\n  }\n\n  const packageJsonPath = absolute('package.json');\n  const modulesPath = getModulesPath(inputProjectRoot);\n  const productionPath = absolute(getWebOutputPath(nativeAppManifest));\n\n  function templatePath(filename: string = ''): string {\n    const overridePath = absolute('web', filename);\n    if (fs.existsSync(overridePath)) {\n      return overridePath;\n    }\n    return path.join(__dirname, '../../web-default', filename);\n  }\n\n  function getProductionPath(...props: string[]): string {\n    return path.resolve(productionPath, ...props);\n  }\n\n  function getIncludeModule(...props: string[]): string {\n    return path.resolve(modulesPath, ...props);\n  }\n\n  return {\n    absolute,\n    includeModule: getIncludeModule,\n    packageJson: packageJsonPath,\n    root: path.resolve(inputProjectRoot),\n    appMain: getEntryPoint(inputProjectRoot, ['./index', './src/index'], ['web']),\n    modules: modulesPath,\n    servedPath: getServedPath(inputProjectRoot),\n    template: {\n      get: templatePath,\n      folder: templatePath(),\n      indexHtml: templatePath('index.html'),\n      manifest: templatePath('manifest.json'),\n      serveJson: templatePath('serve.json'),\n      favicon: templatePath('favicon.ico'),\n      serviceWorker: templatePath('expo-service-worker.js'),\n      registerServiceWorker: templatePath('register-service-worker.js'),\n    },\n    production: {\n      get: getProductionPath,\n      folder: getProductionPath(),\n      indexHtml: getProductionPath('index.html'),\n      manifest: getProductionPath('manifest.json'),\n      serveJson: getProductionPath('serve.json'),\n      favicon: getProductionPath('favicon.ico'),\n      serviceWorker: getProductionPath('expo-service-worker.js'),\n      registerServiceWorker: getProductionPath('register-service-worker.js'),\n    },\n  };\n}\n\nexport function getPaths(projectRoot: string): FilePaths {\n  const { exp } = readConfigJson(projectRoot, true, true);\n  return parsePaths(projectRoot, exp);\n}\n\nexport async function getPathsAsync(projectRoot: string): Promise<FilePaths> {\n  let exp;\n  try {\n    exp = (await readConfigJsonAsync(projectRoot, true, true)).exp;\n  } catch (error) {}\n  return parsePaths(projectRoot, exp);\n}\n\nexport function getServedPath(projectRoot: string): string {\n  const { pkg } = readConfigJson(projectRoot, true, true);\n  const envPublicUrl = process.env.WEB_PUBLIC_URL;\n\n  // We use `WEB_PUBLIC_URL` environment variable or \"homepage\" field to infer\n  // \"public path\" at which the app is served.\n  // Webpack needs to know it to put the right <script> hrefs into HTML even in\n  // single-page apps that may serve index.html for nested URLs like /todos/42.\n  // We can't use a relative path in HTML because we don't want to load something\n  // like /todos/42/static/js/bundle.7289d.js. We have to know the root.\n  const publicUrl = envPublicUrl || pkg.homepage;\n  const servedUrl = envPublicUrl || (publicUrl ? url.parse(publicUrl).pathname : '/');\n  return ensureSlash(servedUrl!, true);\n}\n\nexport function getPublicPaths({\n  projectRoot,\n  ...env\n}: Pick<Environment, 'mode' | 'projectRoot'>): {\n  /**\n   * Webpack uses `publicPath` to determine where the app is being served from.\n   * It requires a trailing slash, or the file assets will get an incorrect path.\n   * In development, we always serve from the root. This makes config easier.\n   */\n  publicPath: string;\n\n  /**\n   * `publicUrl` is just like `publicPath`, but we will provide it to our app\n   * as %WEB_PUBLIC_URL% in `index.html` and `process.env.WEB_PUBLIC_URL` in JavaScript.\n   * Omit trailing slash as %WEB_PUBLIC_URL%/xyz looks better than %WEB_PUBLIC_URL%xyz.\n   */\n  publicUrl: string;\n} {\n  if (getMode(env) === 'production') {\n    const publicPath = getServedPath(projectRoot);\n    return {\n      publicPath,\n      publicUrl: publicPath.slice(0, -1),\n    };\n  }\n\n  return { publicUrl: '', publicPath: '/' };\n}\n\nexport function getProductionPath(projectRoot: string): string {\n  const { exp } = readConfigJson(projectRoot, true, true);\n  return getAbsolutePathWithProjectRoot(projectRoot, getWebOutputPath(exp));\n}\n\n/**\n * get absolute path relative to project root while accounting for `https://` paths\n */\nexport function getAbsolute(projectRoot: string, ...pathComponents: string[]): string {\n  const inputProjectRoot = projectRoot || getPossibleProjectRoot();\n  return getAbsolutePathWithProjectRoot(inputProjectRoot, ...pathComponents);\n}\n"]}