{"version":3,"sources":["credentials/IosCredentials.ts"],"names":["getExistingDistCerts","username","appleTeamId","options","distCerts","getExistingUserCredentials","formatDistCerts","map","usedByApps","userCredentialsId","certId","certP12","certPassword","serialNumber","error","name","join","value","distCertSerialNumber","provideFullCertificate","String","getExistingPushKeys","pushKeys","formatPushKeys","apnsKeyId","apnsKeyP8","provideFullPushKey","short","type","err","certs","Api","callMethodAsync","Error","rest","split"],"mappings":"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","sourcesContent":["import Api from '../Api';\nimport { findP12CertSerialNumber } from '../detach/PKCS12Utils';\n\nexport type Credentials = {\n  appleId?: string;\n  password?: string;\n  teamId?: string;\n  certP12?: string;\n  certPassword?: string;\n  pushP12?: string;\n  pushPassword?: string;\n  provisioningProfile?: string;\n  enterpriseAccount?: string;\n  // These are ids on the spaceship object (implementation detail), Spaceship::Portal::Certificate\n  certId?: string;\n  pushId?: string;\n  provisioningProfileId?: string;\n};\n\nexport type CredObject = {\n  name: string;\n  value: {\n    userCredentialsId?: string;\n    serialNumber?: string;\n  };\n};\n\nexport type CredsList = Array<CredObject>;\n\nexport async function getExistingDistCerts(\n  username: string,\n  appleTeamId: string,\n  options: { provideFullCertificate?: boolean } = {}\n): Promise<CredsList> {\n  const distCerts = await getExistingUserCredentials(username, appleTeamId, 'dist-cert');\n  return formatDistCerts(distCerts, options);\n}\n\nexport function formatDistCerts(distCerts: any, options: { provideFullCertificate?: boolean }) {\n  return distCerts.map(({ usedByApps, userCredentialsId, certId, certP12, certPassword }: any) => {\n    let serialNumber;\n    try {\n      serialNumber = findP12CertSerialNumber(certP12, certPassword);\n    } catch (error) {\n      serialNumber = '------';\n    }\n    let name = `Serial number: ${serialNumber}`;\n    if (certId) {\n      name = `${name}, Certificate ID: ${certId}`;\n    }\n    if (usedByApps) {\n      name = `Used in apps: ${usedByApps.join(', ')} (${name})`;\n    }\n    return {\n      value: {\n        distCertSerialNumber: serialNumber,\n        ...(options.provideFullCertificate\n          ? { certP12, certId, certPassword }\n          : { userCredentialsId: String(userCredentialsId) }),\n      },\n      name,\n    };\n  });\n}\n\nexport async function getExistingPushKeys(\n  username: string,\n  appleTeamId: string,\n  options: { provideFullPushKey?: boolean } = {}\n): Promise<CredsList> {\n  const pushKeys = await getExistingUserCredentials(username, appleTeamId, 'push-key');\n  return formatPushKeys(pushKeys, options);\n}\n\nexport function formatPushKeys(pushKeys: any, options: { provideFullPushKey?: boolean }) {\n  return pushKeys.map(({ usedByApps, userCredentialsId, apnsKeyId, apnsKeyP8 }: any) => {\n    let name = `Key ID: ${apnsKeyId}`;\n    if (usedByApps) {\n      name = `Used in apps: ${usedByApps.join(', ')} (${name})`;\n    }\n    return {\n      value: {\n        ...(options.provideFullPushKey\n          ? { apnsKeyId, apnsKeyP8 }\n          : { userCredentialsId: String(userCredentialsId) }),\n      },\n      name,\n      short: apnsKeyId,\n    };\n  });\n}\n\nasync function getExistingUserCredentials(\n  username: string,\n  appleTeamId: string,\n  type: string\n): Promise<CredsList> {\n  const { err, certs } = await Api.callMethodAsync('getExistingUserCredentials', [], 'post', {\n    username,\n    appleTeamId,\n    type,\n  });\n\n  if (err) {\n    throw new Error('Error getting existing distribution certificates.');\n  } else {\n    return certs.map(({ usedByApps, userCredentialsId, ...rest }: any) => ({\n      usedByApps: usedByApps && usedByApps.split(';'),\n      userCredentialsId: String(userCredentialsId),\n      ...rest,\n    }));\n  }\n}\n"],"file":"../../credentials/IosCredentials.js","sourceRoot":"/@expo/xdl@57.4.2/src"}